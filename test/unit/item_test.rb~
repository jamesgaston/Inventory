require 'test_helper'




class ItemTest < ActiveSupport::TestCase

		# test that an empty item is not valid
   test "new item empty" do
       item = Item.new
     assert !item.valid?, "Item is not valid"  	
   end

		# test that a name is not enough to satisfy validations
   test "new item has name only" do
     item = Item.new(:name =>"Computer" )
     assert !item.valid?, "Item is not valid"  	
   end

		# test that if we pass all required info the item is valid
   test "new item has all components" do
     item = Item.new(:name =>"Computer", :ownership_id => 1, :category_id => 1, :number=>1 )
     assert item.valid?  	
   end

		# test that new item is for sale 
   test "new item is forsale" do
     item = Item.new(:name =>"Computer", :ownership_id => Item.constant_forsale, :category_id => 1, :number=>1 )
     assert item.forsale  	
   end



		# test that we have loaded all of the fixtures 
   test "loaded all item fixtures" do
     items = Item.all 	
     assert_equal items.count, 5 	
   end

		# test that there are three fixtures with computer as name 
  test "fixtures contain all computers" do
     items = Item.find_all_by_name("Computer")
     assert_equal items.count, 4 	
   end

		# test that if we create a new item, it ups the item count
	test "creating creates a new item" do
		pre = Item.count
		Item.create(:name =>"Desk", :ownership_id => 1, :category_id => 4, :number=>1 )
		post = Item.count
		assert_equal(pre + 1, post) 
	end 

			# test that if we create a new item, it ups the item count
			# same test as previous but uses assert_difference 
			# to avoid duplicate call to Item.count
			# can also just use assert_difference "Item.count" w/o second arg 
	test "creating creates a new item v2" do
		assert_difference("Item.count",1) do 
			Item.create(:name =>"Computer", :ownership_id => 1, :category_id => 1, :number=>1 )
		end 
	end 

			# test that there is an item owned by user 1 
	test "find item owned by user 1" do 
		item = Item.find_by_user_id(1)
		assert_not_nil  item 
	end 
	
			# test that there are two computers that match
			# should not match on my second computer  
	test "find items like mine" do 
		item = Item.find_by_id(1)
		items = item.find_items_like_mine
		assert_equal items.count, 2 
	end 


end

